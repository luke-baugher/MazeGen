import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MazeGeneratorCombinedGUI extends JPanel {

    private static final int WALL = 1;
    private static final int PATH = 0;

    private int[][] maze;
    private int width, height;
    private int cellSize = 50;
    private int startX, startY;
    private int finishX, finishY;
    private boolean isImageImported = false;

    private JTextField imagePathField;
    private JTextField heightField;
    private JTextField widthField;

    public MazeGeneratorCombinedGUI() {
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(5, 2, 10, 10));

        JLabel imagePathLabel = new JLabel("Image Path:");
        imagePathField = new JTextField();
        inputPanel.add(imagePathLabel);
        inputPanel.add(imagePathField);

        JLabel heightLabel = new JLabel("Maze Height:");
        heightField = new JTextField();
        inputPanel.add(heightLabel);
        inputPanel.add(heightField);

        JLabel widthLabel = new JLabel("Maze Width:");
        widthField = new JTextField();
        inputPanel.add(widthLabel);
        inputPanel.add(widthField);

        JButton generateButton = new JButton("Generate Maze");
        JButton clearButton = new JButton("Clear");
        JButton saveCSVButton = new JButton("Save as CSV");

        inputPanel.add(generateButton);
        inputPanel.add(clearButton);
        inputPanel.add(saveCSVButton);

        add(inputPanel, BorderLayout.NORTH);

        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleGenerateButton();
            }
        });

        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearFields();
            }
        });

        saveCSVButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleSaveCSV();
            }
        });
    }

    private void handleSaveCSV() {
        if (maze == null) {
            JOptionPane.showMessageDialog(this, "No maze to save. Generate a maze first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Maze as CSV");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.endsWith(".csv")) {
                filePath += ".csv"; // Ensure the file has a .csv extension
            }
            exportMazeToCSV(filePath);
        }
    }


    private void handleGenerateButton() {
        String imagePath = imagePathField.getText().trim();
        String heightInput = heightField.getText().trim();
        String widthInput = widthField.getText().trim();

        if (!imagePath.isEmpty()) {
            isImageImported = true;
            loadShapeFromImage(imagePath);
        } else {
            isImageImported = false;

            if (heightInput.isEmpty() || widthInput.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please provide both height and width for the maze.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int checkHeight = Integer.parseInt(heightInput);
            height = (checkHeight % 2 == 1) ? checkHeight : checkHeight + 1;

            int checkWidth = Integer.parseInt(widthInput);
            width = (checkWidth % 2 == 1) ? checkWidth : checkWidth + 1;

            maze = new int[height][width];
            initializeMaze();
        }

        scaleMazeToFit();

        if (isImageImported) {
            startX = 1;
            startY = width / 2;
            finishX = height - 2;
            finishY = width / 2;
        } else {
            startX = 1;
            startY = 1;
            finishX = height - 2;
            finishY = width - 2;
        }

        new Thread(this::generateAndDisplayMaze).start();
        repaint();
    }

    private void clearFields() {
        imagePathField.setText("");
        heightField.setText("");
        widthField.setText("");
        maze = null;
        repaint();
    }

    private void loadShapeFromImage(String imagePath) {
        try {
            BufferedImage shapeImage = ImageIO.read(new File(imagePath));
            int originalWidth = shapeImage.getWidth();
            int originalHeight = shapeImage.getHeight();

            int minX = originalWidth, minY = originalHeight;
            int maxX = 0, maxY = 0;

            for (int i = 0; i < originalHeight; i++) {
                for (int j = 0; j < originalWidth; j++) {
                    int color = shapeImage.getRGB(j, i);
                    if (color == Color.BLACK.getRGB()) {
                        minX = Math.min(minX, j);
                        minY = Math.min(minY, i);
                        maxX = Math.max(maxX, j);
                        maxY = Math.max(maxY, i);
                    }
                }
            }

            BufferedImage croppedImage = shapeImage.getSubimage(minX, minY, maxX - minX + 1, maxY - minY + 1);
            this.width = croppedImage.getWidth();
            this.height = croppedImage.getHeight();
            this.maze = new int[height][width];

            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    int color = croppedImage.getRGB(j, i);
                    int red = (color >> 16) & 0xFF;
                    int green = (color >> 8) & 0xFF;
                    int blue = color & 0xFF;

                    int threshold = 50;
                    if (red < threshold && green < threshold && blue < threshold) {
                        maze[i][j] = WALL;
                    } else {
                        maze[i][j] = PATH;
                    }
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Failed to load shape from image. Ensure the file path and format are correct.");
        }
    }

    private void scaleMazeToFit() {
        if (width > 0 && height > 0) {
            this.cellSize = Math.min(712 / width, 712 / height);
        }
    }

    private void initializeMaze() {
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                maze[i][j] = WALL;
            }
        }
    }

    private void generateMaze(int x, int y) {
        List<int[]> directions = new ArrayList<>();
        directions.add(new int[]{-2, 0});
        directions.add(new int[]{2, 0});
        directions.add(new int[]{0, -2});
        directions.add(new int[]{0, 2});
        Collections.shuffle(directions);

        maze[x][y] = PATH;
        repaint();

        try {
            Thread.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        for (int[] direction : directions) {
            int nx = x + direction[0];
            int ny = y + direction[1];

            if (nx >= 1 && ny >= 1 && nx <= height - 1 && ny <= width - 1 && maze[nx][ny] == WALL) {
                maze[x + direction[0] / 2][y + direction[1] / 2] = PATH;
                maze[nx][ny] = PATH;
                generateMaze(nx, ny);
            }
        }
    }

    private void exportMazeToCSV(String filePath) {
        try (PrintWriter writer = new PrintWriter(new File(filePath))) {
            for (int[] row : maze) {
                StringBuilder sb = new StringBuilder();
                for (int cell : row) {
                    sb.append(cell).append(",");
                }
                writer.println(sb.deleteCharAt(sb.length() - 1));
            }
            JOptionPane.showMessageDialog(this, "Maze exported successfully to " + filePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error exporting maze to CSV.");
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int offSetForGUIy =getComponent(0).getHeight();
        if (maze != null) {
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    if (maze[i][j] == WALL) {
                        g.setColor(Color.BLACK);
                    } else {
                        g.setColor(Color.WHITE);
                    }
                    g.fillRect(j * cellSize, offSetForGUIy + i *cellSize, cellSize, cellSize);
                }
            }

            // Draw start and finish points
            g.setColor(Color.GREEN);
            g.fillRect(startY * cellSize, offSetForGUIy +startX * cellSize, cellSize, cellSize);

            g.setColor(Color.RED);
            g.fillRect(finishY * cellSize,offSetForGUIy + finishX * cellSize, cellSize, cellSize);
        }
    }

    private void generateAndDisplayMaze() {
        generateMaze(startX, startY);
        maze[finishX][finishY] = PATH;
        repaint();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Maze Generator");
        MazeGeneratorCombinedGUI mazePanel = new MazeGeneratorCombinedGUI();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(900, 900);
        frame.add(mazePanel);
        frame.setVisible(true);
    }
}
